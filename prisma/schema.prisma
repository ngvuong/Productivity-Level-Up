generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  level         Int       @default(1)
  vLevel        Int       @default(1)
  exp           Float     @default(0)
  vExp          Float     @default(0)
  expRate       Float     @default(1.2)
  vExpRate      Float     @default(1.2)
  expMin        Int       @default(0)
  vExpMin       Int       @default(0)
  expReq        Int       @default(50)
  vExpReq       Int       @default(50)
  streak        Int       @default(0)
  streakDate    String?
  projects      Project[]
  tasks         Task[]
  pomos         Pomo[]
  tags          Tag[]
  settings      Settings?

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  time      Int?
  totalTime Int?
  count     Int?
  inSession Boolean @default(true)
  task      String?
  pomodoro  Int     @default(1800)
  breakTime Int     @default(60)
  autostart Boolean @default(false)
  alarm     Boolean @default(true)
  ticking   Boolean @default(true)
}

model Pomo {
  id       String  @id @default(cuid())
  date     String
  duration Int
  claimed  Boolean @default(false)
  exp      Float   @default(0)
  bonus    Float   @default(0)
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId   String?
  task     Task?   @relation(fields: [taskId], references: [id])
}

model Task {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(30)
  date      String
  completed Boolean  @default(false)
  priority  Priority @default(P3)
  notes     String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  pomos     Pomo[]
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  tags      Tag[]
}

model Project {
  id    String @id @default(cuid())
  name  String @unique @db.VarChar(30)
  users User[]
  tasks Task[]
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique @db.VarChar(30)
  users User[]
  tasks Task[]
}

enum Priority {
  P1
  P2
  P3
}
